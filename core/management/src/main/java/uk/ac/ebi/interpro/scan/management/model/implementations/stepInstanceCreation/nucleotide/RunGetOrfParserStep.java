package uk.ac.ebi.interpro.scan.management.model.implementations.stepInstanceCreation.nucleotide;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Required;
import uk.ac.ebi.interpro.scan.management.model.StepInstance;
import uk.ac.ebi.interpro.scan.management.model.implementations.RunBinaryStep;
import uk.ac.ebi.interpro.scan.util.Utilities;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

/**
 * @author Gift Nuka
 */
public class RunGetOrfParserStep extends RunBinaryStep {

    private static final Logger LOGGER = Logger.getLogger(RunGetOrfParserStep.class.getName());

    private String fullPathToPython;

    private String fullPathToBinary;

    /**
     * The path / file name for the INPUT FILE (ORFs sequence fasta file).
     */
    private String orfsFilePath;

    /**
     * The path / file name for the OUTPUT FILE (filtered protein sequence fasta file).
     */
    private String fastaFilePath;

    private String orfsFilterSize = "6";

    public String getFullPathToPython() {
        return fullPathToPython;
    }

    public void setFullPathToPython(String fullPathToPython) {
        this.fullPathToPython = fullPathToPython;
    }

    public String getFullPathToBinary() {
        return fullPathToBinary;
    }

    public String getOrfsFilePath() {
        return orfsFilePath;
    }

    @Required
    public void setOrfsFilePath(String orfsFilePath) {
        this.orfsFilePath = orfsFilePath;
    }

    /**
     * Path to getorf binary.
     *
     * @param fullPathToBinary
     */
    @Required
    public void setFullPathToBinary(String fullPathToBinary) {
        this.fullPathToBinary = fullPathToBinary;
    }

    /**
     * Note this is the path template for the OUTPUT FILE - e.g. the protein sequence
     * file generated by GetOrfParser.
     *
     * @param fastaFilePath being the name of the protein sequence output file.
     */
    @Required
    public void setFastaFilePath(String fastaFilePath) {
        this.fastaFilePath = fastaFilePath;
    }

    public void setOrfsFilterSize(String orfsFilterSize) {
        this.orfsFilterSize = orfsFilterSize;
    }

    @Override
    protected List<String> createCommand(StepInstance stepInstance, String temporaryFileDirectory) {
        final Map<String, String> parameters = stepInstance.getParameters();

        final String inputORFsFastaFile = stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory, orfsFilePath);

        final String outputFastaFile = stepInstance.buildFullyQualifiedFilePath(temporaryFileDirectory, fastaFilePath);

        final List<String> command = new ArrayList<String>();

        if(this.getFullPathToPython().trim().isEmpty()){
            command.add("python3");
        }else{
            command.add(this.getFullPathToPython());
        }
        command.add(fullPathToBinary);
        command.add(orfsFilterSize);
        command.add(inputORFsFastaFile);
        command.add(outputFastaFile);

        // No need for binary switches for now.
        //command.addAll(getBinarySwitchesAsList());

        Utilities.verboseLog(1100, "RunGetOrfParserStep: " + getCommandBuilder(command));
        return command;
    }
}
